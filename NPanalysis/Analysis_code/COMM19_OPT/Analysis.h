#ifndef Analysis_h
#define Analysis_h
/*****************************************************************************
 * Copyright (C) 2009-2014    this file is part of the NPTool Project        *
 *                                                                           *
 * For the licensing terms see $NPTOOL/Licence/NPTool_Licence                *
 * For the list of contributors see $NPTOOL/Licence/Contributors             *
 *****************************************************************************/

/*****************************************************************************
 * Original Author: Adrien MATTA  contact address: a.matta@surrey.ac.uk      *
 *                                                                           *
 * Creation Date  : march 2025                                               *
 * Last update    :                                                          *
 *---------------------------------------------------------------------------*
 * Decription:                                                               *
 * Class describing the property of an Analysis object                       *
 *                                                                           *
 *---------------------------------------------------------------------------*
 * Comment:                                                                  *
 *                                                                           *
 *                                                                           *
 *****************************************************************************/
#include"NPVAnalysis.h"
#include"NPEnergyLoss.h"
#include"NPReaction.h"
#include"RootOutput.h"
#include"RootInput.h"
#include "TMugastPhysics.h"
#include "TInitialConditions.h"
#include <TRandom3.h>
#include <TVector3.h>
#include <TMath.h>
#include <vector>

class Analysis: public NPL::VAnalysis{
  public:
    Analysis();
    ~Analysis();

  public:
    void Init();
    void TreatEvent();
    void End();

  void InitOutputBranch();
  void InitInputBranch();
  void ReInitValue();
  static NPL::VAnalysis* Construct();

  private:
  std::vector<std::vector<double>> Ex;
  std::vector<double> Target_dThickness;
  std::vector<double> ThetaLab;
  std::vector<double> PhiLab;



  int nbParticleMG;

  NPL::Reaction myReaction;
    //	Energy loss table: the G4Table are generated by the simulation
  NPL::EnergyLoss LightTarget;
  NPL::EnergyLoss LightAl;
  NPL::EnergyLoss LightSi;
  NPL::EnergyLoss BeamCD2;
  NPL::EnergyLoss* BeamWindow;
  NPL::EnergyLoss* LightWindow;

  //Target informations
  double TargetThickness ;
  double WindowsThickness;

  // Beam Energy
  double OriginalBeamEnergy ; // AMEV
  double FinalBeamEnergy;

  // intermediate variable
  TVector3 BeamDirection;
  TVector3 BeamImpact;
  TRandom3 Rand ;
  int Run;
  int DetectorNumber  ;
  double ThetaNormalTarget;
  double ThetaMGSurface ;
  double Energy ;

  TMugastPhysics* MG;
  TInitialConditions* myInit ;

};
#endif
